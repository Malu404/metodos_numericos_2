(Matriz, Matriz) decomposicaoQR (Matriz A, int n)
Matriz QT, J+-, R!"#$, R#%&'$, R;
// Inicializar matrizes
QT ← I; // Esta matriz contém os produtos das matrizes ortogonais J+- (veja eq. (11))
R#%&'$ ← A; // Na inicialização, R#%&'$ não tem a estrutura de uma matriz triangular superior
Para j = 1 ... (n-1) faça // loop das colunas
Para i = (j+1) ... (n) faça // loop das linhas
// Construção da matriz de Jacobi J+-
J+- ← matrizJacobiBaseadaNoElemento_ij_DeRvelha(R#%&'$, i, j, n);
// Matriz modificada com elemento (i,j) zerado
R!"#$ ← J+-R#%&'$;
// Salvar para o próximo passo.
R#%&'$ ← R!"#$;
// Acumular o produto das matrizes de Jacobi como
// QT ← J!(!/() ⋯ J!( ⋯ J1(J)(I
QT ← J+-QT; // QT é a transposta de Q. Note a ordem do produto (eq. (11)).
Fim Para
Fim Para
// No final do loop externo, o formato da matriz R!"#$ é triangular superior.
Q ← Transposta(QT);
R ← R!"#$;
return (Q, R);

~A, ~X <- MétodoQr(~T, ~H, n, epsilon)
    ~X <- ~H 
    ERRO <- 1
    ~A <- ~T    
    while ERRO>epsilon
        ~Q,~R <- decompQR(~A)
        ~A <- ~R~Q
        ~X <= ~X~Q
        ERRO = Somatorio(n-1)j=1 Somatorio(n)i=j+1 |A[i][j]|
    return(~A,~X)

~Q, ~R <- decompQR(~A)
~Q <- ~I 
    j=1: (n-1)
        x = A[j][j]
        y = A[j+1][j]
        r = (x²+y²)^1/2
        c = x/r 
        s = -y/r 
        ~Q[j] <- ~I 
        Q[j][j] <- c 
        Q[j+1][j+1] <-c 
        Q[j+1][j] <- s
        Q[j][j+1] <- -s 
        A[barrado] <- Qj, ~A
        ~Q <- ~Q ~Q[j]
        A <- A[barrado]
    R <- A 
return(~Q,~R)